namespace LibPacketGremlinTests.Packets
{
    using System.IO;
    using System.Linq;

    using FluentAssertions;

    using OutbreakLabs.LibPacketGremlin.Packets;
    using OutbreakLabs.LibPacketGremlin.Extensions;

    using Xunit;
    using OutbreakLabs.LibPacketGremlin.PacketFactories;
    public class ICMPTests
    {
        [Fact]
        public void ParsesBasicFields()
        {
            byte[] rawBytes = { 0x08, 0x00, 0x4d, 0x59, 0x00, 0x01, 0x00, 0x02, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69 };

            ICMP packet;
            var parseResult = ICMPFactory.Instance.TryParse(rawBytes, out packet);

            parseResult.Should().BeTrue();

            
            packet.Type.Should().Be(8);
            packet.Code.Should().Be(0);
            packet.Checksum.Should().Be(19801);
            packet.ID.Should().Be(1);
            packet.Sequence.Should().Be(2);
            packet.Data.SequenceEqual(new byte[] { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69 }).Should()
                    .BeTrue();
            
        }

        [Fact]
        public void SerializesCorrectly()
        {
            ICMP packet;
            ICMPFactory.Instance.TryParse(new byte[] { 0x08, 0x00, 0x4d, 0x59, 0x00, 0x01, 0x00, 0x02, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69 }, out packet).Should().BeTrue();

            
            using (var ms = new MemoryStream())
            {
                packet.WriteToStream(ms);                
                ms.ToArray()
                    .SequenceEqual(
                        new byte[]
                            { 0x08, 0x00, 0x4d, 0x59, 0x00, 0x01, 0x00, 0x02, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69 })
                    .Should()
                    .BeTrue();
            }
        }

        [Fact]
        public void CorrectsChecksum()
        {
            ICMP packet;
            ICMPFactory.Instance.TryParse(new byte[] { 0x08, 0x00, 0x4d, 0x59, 0x00, 0x01, 0x00, 0x02, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69 }, out packet).Should().BeTrue();
            packet.Checksum = 0;

            packet.CorrectFields();
            packet.Checksum.Should().Be(19801);

        }

        [Fact]
        public void CalculatesLength()
        {
            byte[] rawBytes = { 0x08, 0x00, 0x4d, 0x59, 0x00, 0x01, 0x00, 0x02, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69 };

            ICMP packet;
            var parseResult = ICMPFactory.Instance.TryParse(rawBytes, out packet);

            parseResult.Should().BeTrue();

            packet.Length().Should().Be(packet.ToArray().Length);

        }
    }
}
