namespace LibPacketGremlinTests.Extensions
{
    using System;

    using FluentAssertions;

    using OutbreakLabs.LibPacketGremlin.Extensions;
    using OutbreakLabs.LibPacketGremlin.Packets;

    using Xunit;
    using System.Linq;
    using OutbreakLabs.LibPacketGremlin.PacketFactories;
    using OutbreakLabs.LibPacketGremlin.Abstractions;
    using OutbreakLabs.LibPacketGremlin.Utilities;

    public class IEEE802_11CryptoTests
    {
        [Fact]
        public void CanDecryptCCMP()
        {
            var temporalKey = new byte[]
                                  {
                                      0x1d, 0x03, 0x5e, 0x8b, 0xeb, 0x4f, 0x83, 0x61, 0x1d, 0xc9, 0x3e, 0x26, 0x57, 0xce,
                                      0xcf, 0x69
                                  };
            var encryptedPacketL = new byte[]
                                       {
                                           0x08, 0x41, 0x02, 0x01, 0x00, 0x0b, 0x86, 0xc2, 0xa4, 0x85, 0x00, 0x13, 0xce,
                                           0x55, 0x98, 0xef, 0x00, 0x0f, 0x66, 0xe3, 0xe4, 0x01, 0x20, 0x2e, 0x01, 0x00,
                                           0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x95, 0xc3, 0x1e, 0x2d, 0x02, 0x01, 0x58,
                                           0x9f, 0x4d, 0xeb, 0xe2, 0x27, 0xc4, 0xe9, 0xc2, 0x1d, 0xb1, 0x2c, 0x7a, 0x66,
                                           0x6a, 0x35, 0x80, 0x8a, 0xbe, 0x1e, 0x73, 0x8d, 0xab, 0x1d, 0xa3, 0x6b, 0xa0,
                                           0xf3, 0x16, 0x81, 0x70, 0x9a, 0x94, 0xf0, 0xb6, 0x53, 0x2c, 0xd6, 0x93, 0x5b,
                                           0x14, 0x13, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xe2, 0x61, 0x88, 0x6d, 0xb4, 0xde,
                                           0x64, 0x11, 0x22, 0xc7, 0xc2, 0x24, 0x02, 0x60, 0x51, 0x00, 0x00, 0x30, 0x82,
                                           0x09, 0x57, 0x76, 0x59, 0xa9, 0xd2, 0x35, 0x57, 0x73, 0x12, 0xc4, 0x69, 0x34,
                                           0x0f, 0xd0, 0x2c, 0x1f, 0x55, 0xa9, 0xcf, 0x6a, 0xc3, 0x08, 0x03, 0x6f, 0xa1,
                                           0x4a, 0x9e, 0xa6, 0xef, 0x71, 0x6d, 0xb6, 0x2f, 0xcc, 0x0c, 0xbb, 0x40, 0x6e,
                                           0x90, 0x1d, 0x3e, 0xa2, 0x53, 0xf9, 0x26, 0x71, 0x65, 0x02, 0x47, 0xd1, 0xb6,
                                           0xb1, 0x01, 0xd9, 0x48, 0x80, 0xcd, 0x6c, 0x65, 0x75, 0x5b, 0xf4, 0x95, 0x1a,
                                           0x68, 0xae, 0xdf, 0x8b, 0x8d, 0xbb, 0x5f, 0x4f, 0xd5, 0x8b, 0x66, 0xb1, 0x3c,
                                           0x72, 0x16, 0xe8, 0x5b, 0x70, 0x6f, 0x1b, 0xdd, 0xa7, 0x8a, 0xd8, 0x24, 0xed,
                                           0xc9, 0x77, 0x1a, 0xa0, 0x74, 0x36, 0x3e, 0x70, 0x5b, 0x52, 0xbd, 0x7c, 0x11,
                                           0x50, 0x60, 0x1d, 0x24, 0x85, 0x8b, 0x8a, 0xb3, 0x63, 0x5c, 0x5b, 0x09, 0x94,
                                           0xaf, 0xa5, 0xe8, 0xc4, 0xae, 0x65, 0x92, 0xa8, 0x26, 0xfd, 0x28, 0x43, 0x37,
                                           0x4c, 0x6d, 0x19, 0x79, 0x14, 0x95, 0x40, 0x5a, 0xf6, 0x98, 0xb7, 0xd7, 0x79,
                                           0xfb, 0xfe, 0xbd, 0x0c, 0xc5, 0xf8, 0x77, 0xaf, 0x98, 0x9e, 0xf4, 0xad, 0xce,
                                           0x40, 0xcc, 0x28, 0xeb, 0xc6, 0xa9, 0xd7, 0xf9, 0x98, 0xfc, 0xbb, 0xc3, 0x66,
                                           0x94, 0x4e, 0xea, 0x6e, 0xdd, 0x30, 0x3b, 0x65, 0x6b, 0xfd, 0x05, 0xa8, 0x68,
                                           0x2e, 0x7e, 0xaa, 0x43, 0xe4, 0x65, 0x26, 0x11, 0x83, 0x86, 0xe1, 0x68, 0x15,
                                           0x90, 0xdf, 0x81, 0x5c, 0x01, 0xdf, 0x3d, 0x85, 0x56, 0x34, 0x14, 0x31, 0x2a,
                                           0xbf, 0x6f, 0xb5, 0xd6, 0xcf, 0xbe, 0xe9, 0x07, 0xc9, 0x36, 0xe7, 0x31, 0x83,
                                           0x5b, 0xfa, 0x4a, 0x29, 0x62, 0xfe, 0x76, 0x40, 0xed, 0x64, 0xb8, 0x2a, 0xc7,
                                           0x3c, 0xb5, 0x76, 0xd9, 0x07, 0x2b, 0x3a, 0xde, 0xc1, 0xaa, 0xaa, 0xd5, 0x24,
                                           0xbf, 0x74, 0x91, 0xd9, 0x1a, 0xb3, 0x93, 0x83, 0xda, 0xa6, 0xb0, 0xd2, 0xc7,
                                           0xbe, 0x0c, 0xdd, 0x17, 0x87, 0xff, 0xa2, 0x21, 0x95, 0xe9, 0x08, 0x3b, 0x97,
                                           0xde, 0x62, 0x3c, 0x17, 0x7c, 0xf1, 0xfc, 0x58, 0x21, 0x8f, 0x11, 0x28, 0x79,
                                           0xed, 0x9e, 0xa5, 0x4a, 0xb3, 0x48, 0x8a, 0xf6, 0xcd, 0xd1, 0xb4, 0x54, 0xe6,
                                           0xfc, 0x5b, 0x87, 0xd6, 0x81, 0x67, 0x14, 0x0a, 0xd4, 0x4e, 0xf6, 0x7a, 0x66,
                                           0xc1, 0x87, 0xc3, 0x9e, 0xb0, 0xbe, 0x15, 0xb4, 0xb8, 0xca, 0x6a, 0x54, 0x80,
                                           0x72, 0x23, 0xdf, 0x10, 0x70, 0x4a, 0xb5, 0x6b, 0xef, 0x56, 0x94, 0x96, 0xc0,
                                           0x65, 0x79, 0x14, 0xc0, 0xc5, 0x88, 0x26, 0x52, 0xa0, 0x32, 0xd0, 0xe2, 0x2e,
                                           0x9a, 0x31, 0x36, 0xf1, 0x4b, 0x29, 0x2e, 0x68, 0x6c, 0x07, 0x67, 0x36, 0xc0,
                                           0x43, 0xe3, 0x95, 0xea, 0x90, 0xce, 0xe2, 0x2d, 0x34, 0x3d, 0x96, 0x29, 0x1f,
                                           0xb4, 0x4d, 0x61, 0x8d, 0xd5, 0xdb, 0xde, 0xce, 0x65, 0xcc, 0xfc, 0x0e, 0x30,
                                           0xa0, 0xfb, 0x92, 0xd2, 0xd0, 0xac, 0x9f, 0x6b, 0xe4, 0xf2, 0x2f, 0x86, 0xf6,
                                           0x91, 0xd6, 0x18, 0x97, 0x68, 0x27, 0xd1, 0x4b, 0x4f, 0x92, 0xda, 0x63, 0x32,
                                           0xbf, 0x0f, 0x95, 0x8a, 0x10, 0xb0, 0xc5, 0xc2, 0x5a, 0xa9, 0x31, 0x67, 0x8f,
                                           0x23, 0x21, 0xc5, 0x96, 0x97, 0x2d, 0x14, 0x46, 0xbb, 0x3f, 0x82, 0x4a, 0x31,
                                           0x0a, 0x6c, 0x0f, 0x21, 0xab, 0x52, 0x4b, 0x9c, 0x89, 0xdf, 0x00, 0xbb, 0x80,
                                           0x4f, 0xa8, 0x78, 0xe6, 0x9b, 0x0a, 0x96, 0xb8, 0x81, 0x03, 0x74, 0x93, 0x32,
                                           0xc8, 0x3a, 0x72, 0x31, 0x58, 0x72, 0xec, 0xab, 0x33, 0x60, 0xeb, 0x0c, 0xb4,
                                           0x35, 0x7e, 0x40, 0x0c, 0x74, 0x24, 0xb1, 0xd9, 0x84, 0xc6, 0x3d, 0x88, 0x6f,
                                           0x7d, 0x8c, 0xfd, 0xe2, 0x59, 0xb5, 0x24, 0xe1, 0x9b, 0xbf, 0x84, 0xf6, 0x43,
                                           0x67, 0x95, 0x88, 0x52, 0x87, 0x82, 0x47, 0xc2, 0x3f, 0xae, 0x56, 0x2a, 0x31,
                                           0xd9, 0x07, 0x27, 0x01, 0xc6, 0xef, 0x0a, 0x12, 0x38, 0x03, 0x93, 0x91, 0x9c,
                                           0xaa, 0xc6, 0x14, 0x3a, 0x1b, 0x26, 0x6e, 0x16, 0x0b, 0xb1, 0xc1, 0xef, 0x8d,
                                           0x0c, 0xa8, 0x82, 0xc4, 0x5a, 0x28, 0xd4, 0xd0, 0x46, 0x90, 0xc9, 0xbc, 0xac,
                                           0x37, 0x68, 0x03, 0xbe, 0x6f, 0x4f, 0x60, 0x6f, 0xee, 0xb8, 0x34, 0x03, 0x3a,
                                           0x7d, 0xd0, 0x9f, 0xc9, 0x8d, 0x95, 0xc1, 0x0f, 0x3d, 0xc8, 0xeb, 0x84, 0xfe,
                                           0x42, 0xd7, 0xf2, 0xae, 0x14, 0xf0, 0x1b, 0xcf, 0x95, 0x23, 0x54, 0xb7, 0x2e,
                                           0x68, 0x79, 0xe2, 0xf3, 0x22, 0xe7, 0x6f, 0x51, 0x5e, 0xa2, 0xe3, 0xd3, 0xb5,
                                           0x6d, 0xea, 0x77, 0xc0, 0xb3, 0xbc, 0x4f, 0x55, 0xf2, 0x04, 0xc8, 0x63, 0x14,
                                           0x8d, 0x17, 0xd6, 0x7f, 0x79, 0x8d, 0x95, 0xd3, 0x76, 0x35, 0x3a, 0x09, 0xe4,
                                           0xb8, 0x08, 0xe1, 0xfb, 0xe1, 0xf5, 0xb7, 0xc4, 0x7a, 0x66, 0xfb, 0xe6, 0x59,
                                           0xc2, 0x9b, 0x60, 0xc5, 0xe5, 0xb1, 0x47, 0xcc, 0x12, 0xdc, 0xb7, 0x1f, 0x9e,
                                           0xb8, 0x55, 0xfb, 0x5d, 0x01, 0xcf, 0x69, 0x2a, 0x85, 0x55, 0x55, 0xe9, 0x67,
                                           0x64, 0x39, 0x66, 0xda, 0xe0, 0x94, 0x7f, 0xe4, 0xd1, 0xd9, 0x3e, 0xbd, 0x54,
                                           0x13, 0x1c, 0xd6, 0x49, 0xdd, 0x22, 0xdf, 0xba, 0xce, 0x0b, 0xc6, 0x09, 0x9f,
                                           0x17, 0xea, 0xea, 0xdd, 0x90, 0x25, 0xec, 0xa4, 0xb1, 0x31, 0x79, 0x53, 0x60,
                                           0x14, 0x17, 0xe3, 0xe0, 0x17, 0x35, 0x88, 0x71, 0xc6, 0xd5, 0xe1, 0x74, 0x4c,
                                           0xd0, 0xb8, 0xec, 0xdd, 0xd2, 0x8f, 0x39, 0xe6, 0xb4, 0xe4, 0xfd, 0x39, 0xf0,
                                           0x5b, 0x56, 0xce, 0xe5, 0x0d, 0x9c, 0x72, 0x22, 0x81, 0x4e, 0x9c, 0xa5, 0x3b,
                                           0x6b, 0x03, 0x66, 0x45, 0x31, 0xe9, 0x40, 0x52, 0x3b, 0x30, 0x37, 0x8c, 0xb1,
                                           0xb9, 0xdb, 0xdd, 0x0f, 0xda, 0x23, 0x44, 0xb8, 0xd0, 0x67, 0x45, 0xf0, 0x1f,
                                           0x36, 0x81, 0x7b, 0xc5, 0x7a, 0x3d, 0x71, 0xe3, 0xe0, 0xcc, 0xe0, 0x43, 0x21,
                                           0x42, 0x67, 0xc7, 0x35, 0x75, 0x12, 0x43, 0x38, 0x7f, 0x20, 0x5b, 0xab, 0xda,
                                           0x6c, 0xfc, 0x86, 0x08, 0xdb, 0x05, 0xb8, 0x73, 0x2b, 0x37, 0x32, 0xeb, 0x86,
                                           0xe0, 0x9d, 0xc4, 0xba, 0xcb, 0x19, 0x41, 0x5a, 0xb0, 0xf7, 0xa8, 0x41, 0xb5,
                                           0xd5, 0x84, 0x1a, 0x07, 0x78, 0x0d, 0x8a, 0x6c, 0x52, 0xb0, 0xac, 0xaa, 0x7f,
                                           0x36, 0x65, 0x21, 0x90, 0xf1, 0xf6, 0x04, 0x39, 0x57, 0x89, 0xfa, 0x8b, 0xbc,
                                           0xf8, 0x2f, 0x5a, 0xe6, 0x51, 0xe7, 0x48, 0x5f, 0xdb, 0x57, 0xfa, 0x2b, 0x85,
                                           0x64, 0x74, 0xb0, 0x0d, 0x83, 0x51, 0x31, 0x1e, 0x59, 0x8b, 0x5c, 0x9b, 0xb8,
                                           0xc8, 0x09, 0x56, 0x1c, 0x40, 0x78, 0xee, 0x8d, 0xd6, 0x69, 0xbd, 0x72, 0x5a,
                                           0x51, 0xfb, 0x97, 0x03, 0x17, 0xe5, 0x14, 0xa6, 0xde, 0x2f, 0x48, 0x5b, 0xf0,
                                           0xe8, 0xec, 0xb2, 0x6a, 0x91, 0x59, 0x6a, 0x05, 0xcb, 0x4b, 0xe4, 0xd2, 0x9b,
                                           0x4c, 0xc6, 0x91, 0xf1, 0xe4, 0x04, 0xa0, 0xd3, 0xf6, 0xee, 0x2f, 0x45, 0xde,
                                           0x11, 0x58, 0x36, 0xff, 0x44, 0x75, 0x9f, 0x86, 0xf6, 0x09, 0x35, 0xba, 0xfe,
                                           0x2d, 0x5c, 0x93, 0x80, 0x21, 0x3e, 0xa0, 0xa8, 0x68, 0x39, 0x56, 0xa6, 0x23,
                                           0xe9, 0x4a, 0x34, 0xd7, 0x67, 0x24, 0x5d, 0x56, 0x8d, 0xa8, 0x43, 0x4d, 0xe5,
                                           0xc7, 0x2a, 0xee, 0x36, 0x91, 0xec, 0x79, 0xbd, 0x10, 0x24, 0xe0, 0x79, 0xc8,
                                           0xca, 0xe9, 0xbb, 0x38, 0x81, 0x69, 0xd2, 0x35, 0x2c, 0xcf, 0x49, 0x20, 0x08,
                                           0x73, 0xd0, 0x98, 0x45, 0xda, 0x7a, 0xfd, 0x6f, 0xf6, 0x0c, 0xee, 0xbd, 0xcd,
                                           0x7f, 0x48, 0x6e, 0xfd, 0x54, 0xc4, 0xe3, 0x0b, 0xb8, 0x9a, 0xc0, 0xf1, 0x10,
                                           0x14, 0xb7, 0x3c, 0x79, 0x0d, 0xd5, 0x9a, 0x95, 0x56, 0x47, 0x8b, 0x94, 0xda,
                                           0x01, 0xa8, 0x5a, 0x2a, 0xa0, 0x06, 0x66, 0xb7, 0x51, 0xe3, 0x7c, 0x3a, 0xe6,
                                           0x1e, 0x2a, 0x11, 0x17, 0x27, 0xb9, 0x37, 0x0c, 0xa3, 0x64, 0xf6, 0x29, 0x00,
                                           0xdf, 0xd8, 0x24, 0xe1, 0x18, 0x43, 0xc0, 0xbb, 0xd2, 0x7c, 0x50, 0x5d, 0xf3,
                                           0x79, 0x4e, 0xd6, 0x54, 0x93, 0x5e, 0x35, 0x88, 0xa6, 0x13, 0x1e, 0x98, 0x38,
                                           0xa8, 0x73, 0xc9, 0xc6, 0x88, 0xc0, 0xdb, 0x4c, 0xc8, 0xbc, 0x8c, 0x32, 0x41,
                                           0x84, 0x57, 0x15, 0x33, 0x4b, 0x60, 0x7f, 0xb2, 0x3f, 0x85, 0xfe, 0x5a, 0x5a,
                                           0x9f, 0xf1, 0x9f, 0x6c, 0x76, 0x33, 0x41, 0x13, 0x8f, 0x90, 0x3f, 0x45, 0x5a,
                                           0xcc, 0x81, 0x03, 0xa5, 0x82, 0x5a, 0xca, 0xec, 0xae, 0x5b, 0xc8, 0x17, 0xc2,
                                           0x18, 0x9b, 0xa3, 0x99, 0x0e, 0x07, 0x4e, 0xd2, 0xa7, 0xa2, 0x5a, 0x24, 0xd4,
                                           0xf2, 0x3a, 0x6e, 0x15, 0x1d, 0x21, 0x21, 0x28, 0xd6, 0x62, 0xf6, 0x90, 0x80,
                                           0xbb, 0xf4, 0xdb, 0xf9, 0x76, 0xb8, 0xd9, 0xeb, 0xb4, 0xe5, 0x13, 0xb6, 0x1e,
                                           0x42, 0x22, 0x7c, 0xc4, 0xdb, 0xff, 0xe8, 0xbb, 0xf2, 0xf1, 0xd3, 0x4d, 0x18,
                                           0xcf, 0xa8, 0xfd, 0xd7, 0xd0, 0x34, 0x24, 0xf2, 0x5d, 0xb2, 0x1c, 0x6a, 0x05,
                                           0x07, 0xd5, 0xc9, 0xff, 0xc0, 0xe2, 0x96, 0xa3, 0x68, 0x53, 0x3f, 0xba, 0x0e,
                                           0x07, 0xbd, 0x37, 0xf7, 0x5f, 0xae, 0x5d, 0x7c, 0x5e, 0x3b, 0x56, 0x1a, 0x51,
                                           0xac, 0xa8, 0x46, 0x4a, 0x77, 0xc8, 0x6a, 0xc1, 0x68, 0x49, 0x11, 0xa0, 0x47,
                                           0x64, 0x1f, 0x75, 0x95, 0xf2, 0x26, 0xf1, 0x0e, 0x44, 0x0b, 0x62, 0x8c, 0x81,
                                           0x31, 0x75, 0x0b, 0xc0, 0x24, 0x64, 0x4b, 0xad, 0x2f, 0x19, 0x98, 0xad, 0x68,
                                           0xc1, 0xba, 0x71, 0xd2, 0xa1, 0xc4, 0xc7, 0xa9, 0x9e, 0xc8, 0xba, 0x5d, 0x9a,
                                           0xe4, 0x0b, 0xd1, 0x48, 0xb3, 0x27, 0xaa, 0xe7, 0xf1, 0x40, 0xb4, 0x28, 0x2d,
                                           0xac, 0x38, 0x68, 0x14, 0xc8, 0xb8, 0xe2, 0xd4, 0x4c, 0xd4, 0xfa, 0x2f, 0x69,
                                           0x2b, 0xf5, 0xaf, 0x10, 0x3d, 0x13, 0x21, 0x26, 0x94, 0x0b, 0x4c, 0xb2, 0x5f,
                                           0x99, 0xac, 0x04, 0x88, 0x74, 0x43, 0x76, 0x75, 0x4c, 0x27, 0x5c, 0x36, 0xee,
                                           0x32, 0x75, 0x3e, 0x55, 0x38, 0xc7, 0xd5, 0x76, 0x9d, 0xbd, 0xfc, 0xa3, 0x55,
                                           0x08, 0xbf, 0x3a, 0xb3, 0x82, 0x89, 0xb3, 0x0d, 0x3e, 0x54, 0xbc, 0x30, 0xfa,
                                           0xb7, 0xc3, 0xf9, 0x9f, 0xbe, 0xfc, 0x87, 0x89, 0x3c, 0x6d, 0x0b, 0x69, 0x7b,
                                           0xbf
                                       };

            var expected = new byte[]
                               {
                                   0x08, 0x41, 0x02, 0x01, 0x00, 0x0b, 0x86, 0xc2, 0xa4, 0x85, 0x00, 0x13, 0xce, 0x55,
                                   0x98, 0xef, 0x00, 0x0f, 0x66, 0xe3, 0xe4, 0x01, 0x20, 0x2e, 0x01, 0x00, 0x00, 0x20,
                                   0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00,
                                   0x00, 0x21, 0x6a, 0x12, 0x00, 0x00, 0x01, 0x01, 0xf7, 0x43, 0xac, 0x10, 0x00, 0x65,
                                   0xac, 0x10, 0x00, 0x01, 0x08, 0x00, 0x26, 0x67, 0x04, 0x00, 0x03, 0x00, 0x44, 0x48,
                                   0x43, 0x50, 0x43, 0x34, 0x65, 0x66, 0x21, 0x68, 0xa8, 0xc7, 0x15, 0x00, 0x00, 0x00,
                                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41,
                                   0xe2, 0x61, 0x88, 0x6d, 0xb4, 0xde, 0x64, 0x11, 0x22, 0xc7, 0xc2, 0x24, 0x02, 0x60,
                                   0x51, 0x00, 0x00, 0x30, 0x82, 0x09, 0x57, 0x76, 0x59, 0xa9, 0xd2, 0x35, 0x57, 0x73,
                                   0x12, 0xc4, 0x69, 0x34, 0x0f, 0xd0, 0x2c, 0x1f, 0x55, 0xa9, 0xcf, 0x6a, 0xc3, 0x08,
                                   0x03, 0x6f, 0xa1, 0x4a, 0x9e, 0xa6, 0xef, 0x71, 0x6d, 0xb6, 0x2f, 0xcc, 0x0c, 0xbb,
                                   0x40, 0x6e, 0x90, 0x1d, 0x3e, 0xa2, 0x53, 0xf9, 0x26, 0x71, 0x65, 0x02, 0x47, 0xd1,
                                   0xb6, 0xb1, 0x01, 0xd9, 0x48, 0x80, 0xcd, 0x6c, 0x65, 0x75, 0x5b, 0xf4, 0x95, 0x1a,
                                   0x68, 0xae, 0xdf, 0x8b, 0x8d, 0xbb, 0x5f, 0x4f, 0xd5, 0x8b, 0x66, 0xb1, 0x3c, 0x72,
                                   0x16, 0xe8, 0x5b, 0x70, 0x6f, 0x1b, 0xdd, 0xa7, 0x8a, 0xd8, 0x24, 0xed, 0xc9, 0x77,
                                   0x1a, 0xa0, 0x74, 0x36, 0x3e, 0x70, 0x5b, 0x52, 0xbd, 0x7c, 0x11, 0x50, 0x60, 0x1d,
                                   0x24, 0x85, 0x8b, 0x8a, 0xb3, 0x63, 0x5c, 0x5b, 0x09, 0x94, 0xaf, 0xa5, 0xe8, 0xc4,
                                   0xae, 0x65, 0x92, 0xa8, 0x26, 0xfd, 0x28, 0x43, 0x37, 0x4c, 0x6d, 0x19, 0x79, 0x14,
                                   0x95, 0x40, 0x5a, 0xf6, 0x98, 0xb7, 0xd7, 0x79, 0xfb, 0xfe, 0xbd, 0x0c, 0xc5, 0xf8,
                                   0x77, 0xaf, 0x98, 0x9e, 0xf4, 0xad, 0xce, 0x40, 0xcc, 0x28, 0xeb, 0xc6, 0xa9, 0xd7,
                                   0xf9, 0x98, 0xfc, 0xbb, 0xc3, 0x66, 0x94, 0x4e, 0xea, 0x6e, 0xdd, 0x30, 0x3b, 0x65,
                                   0x6b, 0xfd, 0x05, 0xa8, 0x68, 0x2e, 0x7e, 0xaa, 0x43, 0xe4, 0x65, 0x26, 0x11, 0x83,
                                   0x86, 0xe1, 0x68, 0x15, 0x90, 0xdf, 0x81, 0x5c, 0x01, 0xdf, 0x3d, 0x85, 0x56, 0x34,
                                   0x14, 0x31, 0x2a, 0xbf, 0x6f, 0xb5, 0xd6, 0xcf, 0xbe, 0xe9, 0x07, 0xc9, 0x36, 0xe7,
                                   0x31, 0x83, 0x5b, 0xfa, 0x4a, 0x29, 0x62, 0xfe, 0x76, 0x40, 0xed, 0x64, 0xb8, 0x2a,
                                   0xc7, 0x3c, 0xb5, 0x76, 0xd9, 0x07, 0x2b, 0x3a, 0xde, 0xc1, 0xaa, 0xaa, 0xd5, 0x24,
                                   0xbf, 0x74, 0x91, 0xd9, 0x1a, 0xb3, 0x93, 0x83, 0xda, 0xa6, 0xb0, 0xd2, 0xc7, 0xbe,
                                   0x0c, 0xdd, 0x17, 0x87, 0xff, 0xa2, 0x21, 0x95, 0xe9, 0x08, 0x3b, 0x97, 0xde, 0x62,
                                   0x3c, 0x17, 0x7c, 0xf1, 0xfc, 0x58, 0x21, 0x8f, 0x11, 0x28, 0x79, 0xed, 0x9e, 0xa5,
                                   0x4a, 0xb3, 0x48, 0x8a, 0xf6, 0xcd, 0xd1, 0xb4, 0x54, 0xe6, 0xfc, 0x5b, 0x87, 0xd6,
                                   0x81, 0x67, 0x14, 0x0a, 0xd4, 0x4e, 0xf6, 0x7a, 0x66, 0xc1, 0x87, 0xc3, 0x9e, 0xb0,
                                   0xbe, 0x15, 0xb4, 0xb8, 0xca, 0x6a, 0x54, 0x80, 0x72, 0x23, 0xdf, 0x10, 0x70, 0x4a,
                                   0xb5, 0x6b, 0xef, 0x56, 0x94, 0x96, 0xc0, 0x65, 0x79, 0x14, 0xc0, 0xc5, 0x88, 0x26,
                                   0x52, 0xa0, 0x32, 0xd0, 0xe2, 0x2e, 0x9a, 0x31, 0x36, 0xf1, 0x4b, 0x29, 0x2e, 0x68,
                                   0x6c, 0x07, 0x67, 0x36, 0xc0, 0x43, 0xe3, 0x95, 0xea, 0x90, 0xce, 0xe2, 0x2d, 0x34,
                                   0x3d, 0x96, 0x29, 0x1f, 0xb4, 0x4d, 0x61, 0x8d, 0xd5, 0xdb, 0xde, 0xce, 0x65, 0xcc,
                                   0xfc, 0x0e, 0x30, 0xa0, 0xfb, 0x92, 0xd2, 0xd0, 0xac, 0x9f, 0x6b, 0xe4, 0xf2, 0x2f,
                                   0x86, 0xf6, 0x91, 0xd6, 0x18, 0x97, 0x68, 0x27, 0xd1, 0x4b, 0x4f, 0x92, 0xda, 0x63,
                                   0x32, 0xbf, 0x0f, 0x95, 0x8a, 0x10, 0xb0, 0xc5, 0xc2, 0x5a, 0xa9, 0x31, 0x67, 0x8f,
                                   0x23, 0x21, 0xc5, 0x96, 0x97, 0x2d, 0x14, 0x46, 0xbb, 0x3f, 0x82, 0x4a, 0x31, 0x0a,
                                   0x6c, 0x0f, 0x21, 0xab, 0x52, 0x4b, 0x9c, 0x89, 0xdf, 0x00, 0xbb, 0x80, 0x4f, 0xa8,
                                   0x78, 0xe6, 0x9b, 0x0a, 0x96, 0xb8, 0x81, 0x03, 0x74, 0x93, 0x32, 0xc8, 0x3a, 0x72,
                                   0x31, 0x58, 0x72, 0xec, 0xab, 0x33, 0x60, 0xeb, 0x0c, 0xb4, 0x35, 0x7e, 0x40, 0x0c,
                                   0x74, 0x24, 0xb1, 0xd9, 0x84, 0xc6, 0x3d, 0x88, 0x6f, 0x7d, 0x8c, 0xfd, 0xe2, 0x59,
                                   0xb5, 0x24, 0xe1, 0x9b, 0xbf, 0x84, 0xf6, 0x43, 0x67, 0x95, 0x88, 0x52, 0x87, 0x82,
                                   0x47, 0xc2, 0x3f, 0xae, 0x56, 0x2a, 0x31, 0xd9, 0x07, 0x27, 0x01, 0xc6, 0xef, 0x0a,
                                   0x12, 0x38, 0x03, 0x93, 0x91, 0x9c, 0xaa, 0xc6, 0x14, 0x3a, 0x1b, 0x26, 0x6e, 0x16,
                                   0x0b, 0xb1, 0xc1, 0xef, 0x8d, 0x0c, 0xa8, 0x82, 0xc4, 0x5a, 0x28, 0xd4, 0xd0, 0x46,
                                   0x90, 0xc9, 0xbc, 0xac, 0x37, 0x68, 0x03, 0xbe, 0x6f, 0x4f, 0x60, 0x6f, 0xee, 0xb8,
                                   0x34, 0x03, 0x3a, 0x7d, 0xd0, 0x9f, 0xc9, 0x8d, 0x95, 0xc1, 0x0f, 0x3d, 0xc8, 0xeb,
                                   0x84, 0xfe, 0x42, 0xd7, 0xf2, 0xae, 0x14, 0xf0, 0x1b, 0xcf, 0x95, 0x23, 0x54, 0xb7,
                                   0x2e, 0x68, 0x79, 0xe2, 0xf3, 0x22, 0xe7, 0x6f, 0x51, 0x5e, 0xa2, 0xe3, 0xd3, 0xb5,
                                   0x6d, 0xea, 0x77, 0xc0, 0xb3, 0xbc, 0x4f, 0x55, 0xf2, 0x04, 0xc8, 0x63, 0x14, 0x8d,
                                   0x17, 0xd6, 0x7f, 0x79, 0x8d, 0x95, 0xd3, 0x76, 0x35, 0x3a, 0x09, 0xe4, 0xb8, 0x08,
                                   0xe1, 0xfb, 0xe1, 0xf5, 0xb7, 0xc4, 0x7a, 0x66, 0xfb, 0xe6, 0x59, 0xc2, 0x9b, 0x60,
                                   0xc5, 0xe5, 0xb1, 0x47, 0xcc, 0x12, 0xdc, 0xb7, 0x1f, 0x9e, 0xb8, 0x55, 0xfb, 0x5d,
                                   0x01, 0xcf, 0x69, 0x2a, 0x85, 0x55, 0x55, 0xe9, 0x67, 0x64, 0x39, 0x66, 0xda, 0xe0,
                                   0x94, 0x7f, 0xe4, 0xd1, 0xd9, 0x3e, 0xbd, 0x54, 0x13, 0x1c, 0xd6, 0x49, 0xdd, 0x22,
                                   0xdf, 0xba, 0xce, 0x0b, 0xc6, 0x09, 0x9f, 0x17, 0xea, 0xea, 0xdd, 0x90, 0x25, 0xec,
                                   0xa4, 0xb1, 0x31, 0x79, 0x53, 0x60, 0x14, 0x17, 0xe3, 0xe0, 0x17, 0x35, 0x88, 0x71,
                                   0xc6, 0xd5, 0xe1, 0x74, 0x4c, 0xd0, 0xb8, 0xec, 0xdd, 0xd2, 0x8f, 0x39, 0xe6, 0xb4,
                                   0xe4, 0xfd, 0x39, 0xf0, 0x5b, 0x56, 0xce, 0xe5, 0x0d, 0x9c, 0x72, 0x22, 0x81, 0x4e,
                                   0x9c, 0xa5, 0x3b, 0x6b, 0x03, 0x66, 0x45, 0x31, 0xe9, 0x40, 0x52, 0x3b, 0x30, 0x37,
                                   0x8c, 0xb1, 0xb9, 0xdb, 0xdd, 0x0f, 0xda, 0x23, 0x44, 0xb8, 0xd0, 0x67, 0x45, 0xf0,
                                   0x1f, 0x36, 0x81, 0x7b, 0xc5, 0x7a, 0x3d, 0x71, 0xe3, 0xe0, 0xcc, 0xe0, 0x43, 0x21,
                                   0x42, 0x67, 0xc7, 0x35, 0x75, 0x12, 0x43, 0x38, 0x7f, 0x20, 0x5b, 0xab, 0xda, 0x6c,
                                   0xfc, 0x86, 0x08, 0xdb, 0x05, 0xb8, 0x73, 0x2b, 0x37, 0x32, 0xeb, 0x86, 0xe0, 0x9d,
                                   0xc4, 0xba, 0xcb, 0x19, 0x41, 0x5a, 0xb0, 0xf7, 0xa8, 0x41, 0xb5, 0xd5, 0x84, 0x1a,
                                   0x07, 0x78, 0x0d, 0x8a, 0x6c, 0x52, 0xb0, 0xac, 0xaa, 0x7f, 0x36, 0x65, 0x21, 0x90,
                                   0xf1, 0xf6, 0x04, 0x39, 0x57, 0x89, 0xfa, 0x8b, 0xbc, 0xf8, 0x2f, 0x5a, 0xe6, 0x51,
                                   0xe7, 0x48, 0x5f, 0xdb, 0x57, 0xfa, 0x2b, 0x85, 0x64, 0x74, 0xb0, 0x0d, 0x83, 0x51,
                                   0x31, 0x1e, 0x59, 0x8b, 0x5c, 0x9b, 0xb8, 0xc8, 0x09, 0x56, 0x1c, 0x40, 0x78, 0xee,
                                   0x8d, 0xd6, 0x69, 0xbd, 0x72, 0x5a, 0x51, 0xfb, 0x97, 0x03, 0x17, 0xe5, 0x14, 0xa6,
                                   0xde, 0x2f, 0x48, 0x5b, 0xf0, 0xe8, 0xec, 0xb2, 0x6a, 0x91, 0x59, 0x6a, 0x05, 0xcb,
                                   0x4b, 0xe4, 0xd2, 0x9b, 0x4c, 0xc6, 0x91, 0xf1, 0xe4, 0x04, 0xa0, 0xd3, 0xf6, 0xee,
                                   0x2f, 0x45, 0xde, 0x11, 0x58, 0x36, 0xff, 0x44, 0x75, 0x9f, 0x86, 0xf6, 0x09, 0x35,
                                   0xba, 0xfe, 0x2d, 0x5c, 0x93, 0x80, 0x21, 0x3e, 0xa0, 0xa8, 0x68, 0x39, 0x56, 0xa6,
                                   0x23, 0xe9, 0x4a, 0x34, 0xd7, 0x67, 0x24, 0x5d, 0x56, 0x8d, 0xa8, 0x43, 0x4d, 0xe5,
                                   0xc7, 0x2a, 0xee, 0x36, 0x91, 0xec, 0x79, 0xbd, 0x10, 0x24, 0xe0, 0x79, 0xc8, 0xca,
                                   0xe9, 0xbb, 0x38, 0x81, 0x69, 0xd2, 0x35, 0x2c, 0xcf, 0x49, 0x20, 0x08, 0x73, 0xd0,
                                   0x98, 0x45, 0xda, 0x7a, 0xfd, 0x6f, 0xf6, 0x0c, 0xee, 0xbd, 0xcd, 0x7f, 0x48, 0x6e,
                                   0xfd, 0x54, 0xc4, 0xe3, 0x0b, 0xb8, 0x9a, 0xc0, 0xf1, 0x10, 0x14, 0xb7, 0x3c, 0x79,
                                   0x0d, 0xd5, 0x9a, 0x95, 0x56, 0x47, 0x8b, 0x94, 0xda, 0x01, 0xa8, 0x5a, 0x2a, 0xa0,
                                   0x06, 0x66, 0xb7, 0x51, 0xe3, 0x7c, 0x3a, 0xe6, 0x1e, 0x2a, 0x11, 0x17, 0x27, 0xb9,
                                   0x37, 0x0c, 0xa3, 0x64, 0xf6, 0x29, 0x00, 0xdf, 0xd8, 0x24, 0xe1, 0x18, 0x43, 0xc0,
                                   0xbb, 0xd2, 0x7c, 0x50, 0x5d, 0xf3, 0x79, 0x4e, 0xd6, 0x54, 0x93, 0x5e, 0x35, 0x88,
                                   0xa6, 0x13, 0x1e, 0x98, 0x38, 0xa8, 0x73, 0xc9, 0xc6, 0x88, 0xc0, 0xdb, 0x4c, 0xc8,
                                   0xbc, 0x8c, 0x32, 0x41, 0x84, 0x57, 0x15, 0x33, 0x4b, 0x60, 0x7f, 0xb2, 0x3f, 0x85,
                                   0xfe, 0x5a, 0x5a, 0x9f, 0xf1, 0x9f, 0x6c, 0x76, 0x33, 0x41, 0x13, 0x8f, 0x90, 0x3f,
                                   0x45, 0x5a, 0xcc, 0x81, 0x03, 0xa5, 0x82, 0x5a, 0xca, 0xec, 0xae, 0x5b, 0xc8, 0x17,
                                   0xc2, 0x18, 0x9b, 0xa3, 0x99, 0x0e, 0x07, 0x4e, 0xd2, 0xa7, 0xa2, 0x5a, 0x24, 0xd4,
                                   0xf2, 0x3a, 0x6e, 0x15, 0x1d, 0x21, 0x21, 0x28, 0xd6, 0x62, 0xf6, 0x90, 0x80, 0xbb,
                                   0xf4, 0xdb, 0xf9, 0x76, 0xb8, 0xd9, 0xeb, 0xb4, 0xe5, 0x13, 0xb6, 0x1e, 0x42, 0x22,
                                   0x7c, 0xc4, 0xdb, 0xff, 0xe8, 0xbb, 0xf2, 0xf1, 0xd3, 0x4d, 0x18, 0xcf, 0xa8, 0xfd,
                                   0xd7, 0xd0, 0x34, 0x24, 0xf2, 0x5d, 0xb2, 0x1c, 0x6a, 0x05, 0x07, 0xd5, 0xc9, 0xff,
                                   0xc0, 0xe2, 0x96, 0xa3, 0x68, 0x53, 0x3f, 0xba, 0x0e, 0x07, 0xbd, 0x37, 0xf7, 0x5f,
                                   0xae, 0x5d, 0x7c, 0x5e, 0x3b, 0x56, 0x1a, 0x51, 0xac, 0xa8, 0x46, 0x4a, 0x77, 0xc8,
                                   0x6a, 0xc1, 0x68, 0x49, 0x11, 0xa0, 0x47, 0x64, 0x1f, 0x75, 0x95, 0xf2, 0x26, 0xf1,
                                   0x0e, 0x44, 0x0b, 0x62, 0x8c, 0x81, 0x31, 0x75, 0x0b, 0xc0, 0x24, 0x64, 0x4b, 0xad,
                                   0x2f, 0x19, 0x98, 0xad, 0x68, 0xc1, 0xba, 0x71, 0xd2, 0xa1, 0xc4, 0xc7, 0xa9, 0x9e,
                                   0xc8, 0xba, 0x5d, 0x9a, 0xe4, 0x0b, 0xd1, 0x48, 0xb3, 0x27, 0xaa, 0xe7, 0xf1, 0x40,
                                   0xb4, 0x28, 0x2d, 0xac, 0x38, 0x68, 0x14, 0xc8, 0xb8, 0xe2, 0xd4, 0x4c, 0xd4, 0xfa,
                                   0x2f, 0x69, 0x2b, 0xf5, 0xaf, 0x10, 0x3d, 0x13, 0x21, 0x26, 0x94, 0x0b, 0x4c, 0xb2,
                                   0x5f, 0x99, 0xac, 0x04, 0x88, 0x74, 0x43, 0x76, 0x75, 0x4c, 0x27, 0x5c, 0x36, 0xee,
                                   0x32, 0x75, 0x3e, 0x55, 0x38, 0xc7, 0xd5, 0x76, 0x9d, 0xbd, 0xfc, 0xa3, 0x55, 0x08,
                                   0xbf, 0x3a, 0xb3, 0x82, 0x89, 0xb3, 0x0d, 0x3e, 0x54, 0xbc, 0x30, 0xfa, 0xb7, 0xc3,
                                   0xf9, 0x9f, 0xbe, 0xfc, 0x87, 0x89, 0x3c, 0x6d, 0x0b, 0x69, 0x7b, 0xbf
                               };

            var encryptedPacket = encryptedPacketL.Take(81).ToArray();

            var parsedEncryptedPacket = IEEE802_11Factory.Instance.ParseAs(encryptedPacket);

            IPacket decryptedPacket;
            var micCheck = IEEE802_11Crypto.TryDecryptCCMP(parsedEncryptedPacket,
                temporalKey,
                IEEE802_11Crypto.DecryptionHeaderMode.Untouched,
                out decryptedPacket);

            micCheck.Should().BeTrue();

            var stupidHybrid = encryptedPacketL.ToArray();
            Array.Copy(decryptedPacket.ToArray(), stupidHybrid, 81);
            expected.SequenceEqual(stupidHybrid).Should().BeTrue();
        }

        [Fact]
        public void CanDecryptWPA2()
        {
            var beacon = new byte[]
                             {
                                 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x64, 0x70, 0x02, 0xd1, 0x9e,
                                 0x6f, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0xe0, 0x36, 0x80, 0x41, 0xd5, 0x03, 0x00, 0x00,
                                 0x00, 0x00, 0x64, 0x00, 0x31, 0x04, 0x00, 0x1f, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73,
                                 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x28, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
                                 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x29, 0x01, 0x08, 0x82, 0x84, 0x8b, 0x96,
                                 0x8c, 0x12, 0x98, 0x24, 0x03, 0x01, 0x06, 0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x2a, 0x01,
                                 0x00, 0x30, 0x14, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04,
                                 0x01, 0x00, 0x00, 0x0f, 0xac, 0x02, 0x00, 0x00, 0x32, 0x04, 0xb0, 0x48, 0x60, 0x6c, 0xdd,
                                 0x18, 0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x84, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4,
                                 0x00, 0x00, 0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0xdd, 0x09, 0x00, 0x03, 0x7f,
                                 0x01, 0x01, 0x00, 0x00, 0xff, 0x7f
                             };
            var eapol1 = new byte[]
                             {
                                 0x88, 0x02, 0x3a, 0x01, 0x8c, 0x70, 0x5a, 0x59, 0x9e, 0x88, 0x64, 0x70, 0x02, 0xd1, 0x9e,
                                 0x6f, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x00, 0x00, 0x06, 0x00, 0xaa, 0xaa, 0x03, 0x00,
                                 0x00, 0x00, 0x88, 0x8e, 0x02, 0x03, 0x00, 0x5f, 0x02, 0x00, 0x8a, 0x00, 0x10, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x72, 0xd3, 0xd5, 0x5d, 0xeb, 0x88, 0xf2, 0xf9, 0x3a,
                                 0x73, 0x6d, 0x0b, 0xdd, 0x02, 0x0b, 0x38, 0x42, 0xe4, 0x48, 0xe1, 0x25, 0xc4, 0x93, 0x0a,
                                 0xab, 0x75, 0x0b, 0x85, 0x9e, 0xb7, 0xb6, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                             };
            var eapol2 = new byte[]
                             {
                                 0x88, 0x01, 0x3c, 0x00, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x8c, 0x70, 0x5a, 0x59, 0x9e,
                                 0x88, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x03, 0x00,
                                 0x00, 0x00, 0x88, 0x8e, 0x01, 0x03, 0x00, 0x77, 0x02, 0x01, 0x0a, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8b, 0xaf, 0xcc, 0x0e, 0xfa, 0x80, 0x93, 0xe6, 0xc2,
                                 0x98, 0x8b, 0x48, 0x9a, 0x22, 0x90, 0x83, 0xf8, 0xea, 0x00, 0x46, 0x10, 0x74, 0x29, 0xf1,
                                 0xd7, 0x2d, 0x4d, 0x18, 0x89, 0xc8, 0x6d, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xa6, 0xce, 0x5f, 0xea,
                                 0x3c, 0xf1, 0x69, 0x7b, 0xf3, 0xa7, 0x8f, 0x6f, 0x09, 0x60, 0xea, 0x00, 0x18, 0x30, 0x16,
                                 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00,
                                 0x0f, 0xac, 0x02, 0x3c, 0x00, 0x00, 0x00
                             };
            var eapol3 = new byte[]
                             {
                                 0x88, 0x02, 0x3a, 0x01, 0x8c, 0x70, 0x5a, 0x59, 0x9e, 0x88, 0x64, 0x70, 0x02, 0xd1, 0x9e,
                                 0x6f, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x10, 0x00, 0x06, 0x00, 0xaa, 0xaa, 0x03, 0x00,
                                 0x00, 0x00, 0x88, 0x8e, 0x02, 0x03, 0x00, 0x97, 0x02, 0x13, 0xca, 0x00, 0x10, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x72, 0xd3, 0xd5, 0x5d, 0xeb, 0x88, 0xf2, 0xf9, 0x3a,
                                 0x73, 0x6d, 0x0b, 0xdd, 0x02, 0x0b, 0x38, 0x42, 0xe4, 0x48, 0xe1, 0x25, 0xc4, 0x93, 0x0a,
                                 0xab, 0x75, 0x0b, 0x85, 0x9e, 0xb7, 0xb6, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0xaa, 0x5a, 0x23, 0xeb,
                                 0x3a, 0x90, 0xa8, 0x04, 0xf7, 0xe0, 0x20, 0x5f, 0x11, 0xd7, 0x63, 0x00, 0x38, 0x02, 0x0a,
                                 0x39, 0x03, 0x49, 0xc0, 0xc2, 0xf4, 0x6c, 0xce, 0xe1, 0xf6, 0x7e, 0x12, 0x45, 0xe3, 0xe4,
                                 0x37, 0x3a, 0x83, 0xd0, 0xc5, 0xfe, 0xd5, 0xa2, 0x84, 0x8c, 0x22, 0x15, 0x77, 0x88, 0x06,
                                 0xf8, 0xf5, 0x11, 0xa3, 0xe4, 0xdc, 0xe0, 0xfe, 0xaf, 0x73, 0xdc, 0x9b, 0xeb, 0x29, 0x4d,
                                 0x9c, 0xac, 0x25, 0x86, 0x73, 0xf4, 0x9f, 0x12, 0x2b
                             };
            var eapol4 = new byte[]
                             {
                                 0x88, 0x01, 0x3c, 0x00, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x8c, 0x70, 0x5a, 0x59, 0x9e,
                                 0x88, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x10, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x03, 0x00,
                                 0x00, 0x00, 0x88, 0x8e, 0x01, 0x03, 0x00, 0x5f, 0x02, 0x03, 0x0a, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x0d, 0x2b, 0x91, 0x0c,
                                 0xe9, 0x0b, 0xf4, 0xcb, 0x2b, 0xf2, 0x35, 0x3e, 0x9f, 0xa7, 0x4a, 0x00, 0x00
                             };
            var encryptedUDP = new byte[]
                                   {
                                       0x88, 0x41, 0x2c, 0x00, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x8c, 0x70, 0x5a, 0x59,
                                       0x9e, 0x88, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00,
                                       0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0xdd, 0x60, 0xe7, 0x42, 0x7f, 0xb0, 0xc5,
                                       0x2c, 0x70, 0x9e, 0x81, 0xb4, 0x17, 0x70, 0xa9, 0xf3, 0x69, 0x39, 0xf6, 0x62, 0xbd,
                                       0x5f, 0x2b, 0x90, 0x4a, 0x1d, 0xae, 0x89, 0x13, 0x33, 0xfa, 0x9b, 0x41, 0xe8, 0xeb,
                                       0x95, 0x96, 0x60, 0x77, 0x95, 0x58, 0x3d, 0xe4, 0x97, 0x72, 0xa8, 0xf2, 0x5a, 0x62,
                                       0x89, 0x05, 0x1c, 0x7f, 0xeb, 0x62, 0x95, 0xd0, 0x39, 0x20, 0xee, 0x3d, 0x70, 0x93,
                                       0x00, 0x7e, 0xb0, 0x57, 0xb6, 0xc2, 0xd1, 0xd3, 0x1a, 0x6e, 0xb2, 0xb0, 0xcb, 0xcd,
                                       0xa0, 0x5a, 0x7b, 0x70, 0xfd, 0x78, 0x17, 0x5f, 0x59, 0xad, 0xd9, 0x69, 0x6d, 0x3c,
                                       0x03, 0x28
                                   };
            var PSK = "slapnuts2013fuckyouthisismywifi";
            var SSID = "WirelessAccess (Legacy Devices)";

            var parsedBeacon = IEEE802_11Factory.Instance.ParseAs(beacon);
            var parsedEapol1 = IEEE802_11Factory.Instance.ParseAs(eapol1);
            var parsedEapol2 = IEEE802_11Factory.Instance.ParseAs(eapol2);
            var parsedEapol3 = IEEE802_11Factory.Instance.ParseAs(eapol3);
            var parsedEapol4 = IEEE802_11Factory.Instance.ParseAs(eapol4);
            var parsedEncryptedUdp = IEEE802_11Factory.Instance.ParseAs(encryptedUDP);

            var anonce = parsedEapol1.Layer<EapolKey>().Nonce;
            var snonce = parsedEapol2.Layer<EapolKey>().Nonce;
            var bssid = parsedEapol1.Layer<IEEE802_11>().BSSID;
            var stmac = parsedEapol1.Layer<IEEE802_11>().Destination;

            var pmk = IEEE802_11Crypto.CalculatePMK(PSK, SSID);
            var ptk = IEEE802_11Crypto.CalculatePTK(pmk, stmac, bssid, snonce, anonce);

            var results =
                new[] { /*parsedEapol2, parsedEapol3,*/ parsedEapol4 }.Select(
                    p => p.Layer<IEEE802_1x<EapolKey>>().PtkIsValid(ptk)).ToArray();

            IPacket decryptedPacket;
            var micCheck = IEEE802_11Crypto.TryDecryptCCMP(parsedEncryptedUdp,
                ptk.Skip(32).Take(16).ToArray(),
                IEEE802_11Crypto.DecryptionHeaderMode.Removed,
                out decryptedPacket);
            micCheck.Should().BeTrue();
            decryptedPacket.Layers().OfType<IPv4>().Count().Should().Be(1);
            decryptedPacket.Layers().OfType<UDP>().Count().Should().Be(1);

        }

        [Fact]
        public void CanDecryptWEPStringKey()
        {
            var encryptedPacketBytes = new byte[] { 0x88, 0x41, 0x2c, 0x00, 0x64, 0x70, 0x02, 0xd1, 0x9e, 0x6f, 0x8c, 0x70, 0x5a, 0x59, 0x9e, 0x88, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x83, 0xd1, 0x41, 0x00, 0xd4, 0x02, 0x33, 0x98, 0x03, 0xea, 0x9a, 0xdd, 0x0d, 0xd1, 0x1d, 0xf1, 0x15, 0xbb, 0x7d, 0x71, 0xe6, 0x4c, 0xe4, 0xf0, 0x52, 0xb1, 0x83, 0x73, 0x40, 0x24, 0x05, 0x29, 0xf3, 0x3e, 0xa6, 0xfb, 0x72, 0xdc, 0x0c, 0x27, 0x0e, 0x56, 0xda, 0x77, 0x6d, 0x0c, 0xd9, 0x0b, 0x0b, 0xa9, 0x66, 0xb5, 0x82, 0xdc, 0x6d, 0x41, 0xf3, 0xa5, 0x9d, 0xd0, 0x94, 0x0b, 0x67, 0x1a, 0x6a, 0x85, 0x73, 0x83, 0x8f, 0xf8, 0xbf, 0x05, 0x0c, 0x3c, 0xc3, 0x3a, 0xdb, 0x2e, 0x71, 0x0b, 0xd9, 0x44, 0x13, 0x6c, 0x0d, 0x95, 0x68, 0x30, 0x25, 0x6e, 0xb5, 0x25, 0xb8, 0x1f, 0xe2, 0x35, 0x15, 0xdc, 0x4f, 0x91, 0x03, 0x5b, 0x90, 0x00, 0xe8, 0xab, 0xbd, 0xd7, 0xb0, 0xbf, 0xbb, 0xb8, 0x08, 0xa4, 0xe9, 0x70, 0xdf, 0xea, 0x98, 0x91, 0x31, 0xd1, 0x65, 0x4c, 0x6c, 0xbe, 0x63, 0xee, 0x3d, 0xc4, 0xf5, 0xfd, 0x26, 0xac, 0x7a, 0x98, 0x25, 0xe7, 0x91, 0xd3, 0x8c, 0x6c, 0xba, 0x79, 0x32, 0x25, 0x85, 0xa5, 0x19, 0x69, 0x56, 0xe5, 0xb7, 0xa7, 0x8d, 0x9a, 0x90, 0xf1, 0x61, 0xfe, 0xd3, 0x6b, 0x0b, 0x6c, 0x96, 0x60, 0xed, 0x7b, 0x2f, 0xec, 0xb9, 0x21, 0x6d, 0xff, 0x90, 0x18, 0xf5, 0x4e, 0xce, 0x06, 0x23, 0xd3, 0x76, 0x92, 0x5c, 0x1a, 0x11, 0xc7, 0xb7, 0xa6, 0xa8, 0x99, 0x29, 0xf3, 0x5f, 0x2f, 0xfb, 0xb2, 0xc5, 0x9b, 0xcf, 0x3b, 0x9a, 0x46, 0x3d, 0xf3, 0x7a, 0x8b, 0x97, 0x55, 0x93, 0x34, 0xe7, 0xc2, 0x7c, 0xdc, 0x56, 0xa9, 0x79, 0xba, 0xe0, 0x05, 0x3a, 0x77, 0x46, 0xef, 0x26, 0x12, 0x43, 0x76, 0x0b, 0x16, 0x2e, 0x17, 0x78, 0xc1, 0x4a, 0x73, 0x61, 0xe0, 0x13, 0x13, 0xc7, 0x86, 0xb2, 0x0a, 0xf9, 0x9d, 0x7f, 0x63, 0x3c, 0xde, 0x85, 0xf8, 0x1d, 0xc3, 0xd3, 0x8b, 0x1d, 0x34, 0xad, 0x2d, 0x99, 0x82, 0x96, 0x9d, 0x9a, 0x02, 0x2f, 0x4e, 0x68, 0x2c, 0x7c, 0x3a, 0xa9, 0x3c, 0x4d, 0x19, 0xa9, 0x4a, 0x63, 0x59, 0xdd, 0x78, 0xfc, 0xeb, 0x03, 0x5d, 0x30, 0x33, 0x8b, 0x6e, 0x27, 0x5e, 0xea, 0xf9, 0xed, 0xc5, 0xf2, 0x47, 0x98, 0xa2, 0xc8, 0x0e, 0xe4, 0x9f, 0x17, 0x48, 0x8c, 0xfd, 0x0e, 0x47, 0x17, 0x37, 0x72, 0xa4, 0xb6, 0x49, 0x6e, 0xa7, 0x84, 0x9b, 0xa1, 0x0e, 0xbc, 0x48, 0x4a, 0x52, 0xd8, 0xaa, 0x23, 0x1c, 0x00, 0x27, 0x26, 0x12, 0xa8, 0x93, 0xa3, 0x95, 0x90, 0xc2, 0xde, 0x14, 0x84, 0x41, 0x9f, 0x91, 0xa8, 0xb1 };

            var key = System.Text.Encoding.ASCII.GetBytes("secretwifi123");

            var encryptedPacket = IEEE802_11Factory.Instance.ParseAs(encryptedPacketBytes);
            IPacket decryptedPacket;
            IEEE802_11Crypto.TryDecryptWEP(encryptedPacket, key, out decryptedPacket).Should().BeTrue();
            decryptedPacket.Layers().OfType<UDP>().Any().Should().BeTrue();
        }

        [Fact]
        public void CanDecryptWEPHexKey()
        {
            var encryptedPacketBytes = new byte[] { 0x08, 0x42, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0c, 0xd5, 0x02, 0x89, 0xd0, 0x07, 0x0c, 0xd5, 0x02, 0x89, 0xd0, 0x01, 0xc0, 0x09, 0x4f, 0xfb, 0xc8, 0x00, 0xb7, 0xa6, 0xd7, 0xc9, 0xc4, 0x39, 0x25, 0xbf, 0x15, 0xe6, 0x81, 0xb7, 0xce, 0x53, 0x9b, 0x50, 0xca, 0xb9, 0x64, 0xf5, 0xfa, 0x24, 0x79, 0x0f, 0x54, 0xdf, 0x37, 0x1e, 0xae, 0x12, 0x39, 0xf1, 0xe2, 0x1e, 0xa7, 0x84, 0x91, 0x76, 0x03, 0x16, 0x03, 0x38, 0xfb, 0x91, 0x2f, 0x90, 0xbc, 0x37, 0xa8, 0x98, 0xf2, 0xac, 0xed, 0xf0, 0x69, 0x40, 0xe9, 0x26 };

            var key = new byte[] { 0xF5, 0x34, 0x96, 0x44, 0xc5 };

            var encryptedPacket = IEEE802_11Factory.Instance.ParseAs(encryptedPacketBytes);
            IPacket decryptedPacket;
            IEEE802_11Crypto.TryDecryptWEP(encryptedPacket, key, out decryptedPacket).Should().BeTrue();
            decryptedPacket.Layers().OfType<ARP>().Any().Should().BeTrue();
        }

        [Fact]
        public void CanCalculatePTK()
        {
            var expected = new byte[] {      0xea, 0x0e, 0x40, 0x46, 0x33, 0xc8, 0x02, 0x45, 0x03, 0x02, 0x86, 0x8c, 0xca, 0xa7, 0x49, 0xde
                                        , 0x5c, 0xba, 0x5a, 0xbc, 0xb2, 0x67, 0xe2, 0xde, 0x1d, 0x5e, 0x21, 0xe5, 0x7a, 0xcc, 0xd5, 0x07
                                        , 0x9b, 0x31, 0xe9, 0xff, 0x22, 0x0e, 0x13, 0x2a, 0xe4, 0xf6, 0xed, 0x9e, 0xf1, 0xac, 0xc8, 0x85
                                        , 0x45, 0x82, 0x5f, 0xc3, 0x2e, 0xe5, 0x59, 0x61, 0x39, 0x5a, 0xe4, 0x37, 0x34, 0xd6, 0xc1, 0x07
                                        , 0x98, 0xef, 0x5a, 0xfe, 0x42, 0xc0, 0x74, 0x26, 0x47, 0x18, 0x68, 0xa5, 0x77, 0xd4, 0xd1, 0x7e};

            var pmk = new byte[] { 0xee, 0x51, 0x88, 0x37, 0x93, 0xa6, 0xf6, 0x8e, 0x96, 0x15, 0xfe, 0x73, 0xc8, 0x0a, 0x3a, 0xa6
                                        , 0xf2, 0xdd, 0x0e, 0xa5, 0x37, 0xbc, 0xe6, 0x27, 0xb9, 0x29, 0x18, 0x3c, 0xc6, 0xe5, 0x79, 0x25};

            var stmac = new byte[] { 0, 0x13, 0x46, 0xfe, 0x32, 0x0c };

            var bssid = new byte[] { 0, 0x14, 0x6c, 0x7e, 0x40, 0x80 };

            //var psk = new byte[] { 0x6E, 0x9C, 0x7A, 0x91, 0x9F, 0xB8, 0xAE, 0x93, 0xC1, 0xAB, 0x80, 0x3C, 0x09, 0x00 };

            var snonce = new byte[] { 0x59, 0x16, 0x8b, 0xc3, 0xa5, 0xdf, 0x18, 0xd7, 0x1e, 0xfb, 0x64, 0x23, 0xf3, 0x40, 0x08, 0x8d
                                        , 0xab, 0x9e, 0x1b, 0xa2, 0xbb, 0xc5, 0x86, 0x59, 0xe0, 0x7b, 0x37, 0x64, 0xb0, 0xde, 0x85, 0x70};

            var anonce = new byte[] { 0x22, 0x58, 0x54, 0xb0, 0x44, 0x4d, 0xe3, 0xaf, 0x06, 0xd1, 0x49, 0x2b, 0x85, 0x29, 0x84, 0xf0
                                     , 0x4c, 0xf6, 0x27, 0x4c, 0x0e, 0x32, 0x18, 0xb8, 0x68, 0x17, 0x56, 0x86, 0x4d, 0xb7, 0xa0, 0x55};

            var actual = IEEE802_11Crypto.CalculatePTK(pmk, stmac, bssid, snonce, anonce);
            expected.SequenceEqual(actual).Should().BeTrue();
        }

        [Fact]
        public void CanCalculatePMK()
        {
            var expected = new byte[] { 0x1d, 0x4d, 0xf5, 0x5d, 0xd8, 0xd9, 0x13, 0xf5, 0x54, 0x0d, 0x05, 0x3c, 0xdb, 0x57, 0x83, 0x53
             , 0xd0, 0x6c, 0x0f, 0xb3, 0x50, 0x71, 0x10, 0xee, 0x48, 0xda, 0xce, 0x2b, 0x60, 0xf6, 0xd0, 0xd4
             , 0xc2, 0x24, 0x39, 0x9f, 0xe8, 0x1d, 0x1e, 0x80};

            var essid = "T3st1ng";
            var psk = new byte[] { 0x6E, 0x9C, 0x7A, 0x91, 0x9F, 0xB8, 0xAE, 0x93, 0xC1, 0xAB, 0x80, 0x3C, 0x09, 0x00 };

            var actual = IEEE802_11Crypto.CalculatePMK(psk, System.Text.Encoding.UTF8.GetBytes(essid), 40);
            expected.SequenceEqual(actual).Should().BeTrue();
        }
    }
}
